var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('el-row', [_c('el-col', {
    attrs: {
      "span": 24
    }
  }, [_c('el-form', {
    ref: "form",
    staticStyle: {
      "margin-left": "10%"
    },
    attrs: {
      "model": _vm.form,
      "label-width": "160px"
    }
  }, [_c('fieldset', {
    staticStyle: {
      "width": "80%"
    }
  }, [_c('legend', {
    staticStyle: {
      "margin-left": "40px"
    }
  }, [_c('h1', [_vm._v("基本信息")])]), _vm._v(" "), _c('div', {
    staticStyle: {
      "display": "inline-block",
      "width": "40%",
      "padding": "10px"
    }
  }, [_c('el-form-item', {
    attrs: {
      "label": "头像上传"
    }
  }, [_c('el-upload', {
    staticClass: "avatar-uploader",
    attrs: {
      "action": _vm.getDomain() + '/msmis/api/servedPerson/updateServedPersonPhoto?id=' + _vm.form.servedPersonID,
      "show-file-list": false,
      "headers": _vm.header,
      "on-success": _vm.handleAvatarSuccess
    }
  }, [(_vm.imageUrl) ? _c('img', {
    staticClass: "avatar",
    attrs: {
      "src": _vm.imageUrl
    }
  }) : _c('i', {
    staticClass: "el-icon-plus avatar-uploader-icon"
  })])], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "姓名"
    }
  }, [_c('el-input', {
    model: {
      value: (_vm.form.name),
      callback: function($$v) {
        _vm.form.name = $$v
      },
      expression: "form.name"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "曾用名"
    }
  }, [_c('el-input', {
    model: {
      value: (_vm.form.nameUsed),
      callback: function($$v) {
        _vm.form.nameUsed = $$v
      },
      expression: "form.nameUsed"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "性别"
    }
  }, [_c('el-select', {
    model: {
      value: (_vm.form.sex),
      callback: function($$v) {
        _vm.form.sex = $$v
      },
      expression: "form.sex"
    }
  }, _vm._l((_vm.sexs), function(v, i) {
    return _c('el-option', {
      key: i,
      attrs: {
        "value": v.v,
        "label": v.l
      }
    })
  }))], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "身份证号"
    }
  }, [_c('el-input', {
    model: {
      value: (_vm.form.certifID),
      callback: function($$v) {
        _vm.form.certifID = $$v
      },
      expression: "form.certifID"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "人口类型"
    }
  }, [_c('el-select', {
    attrs: {
      "placeholder": "请选择服务类型"
    },
    model: {
      value: (_vm.form.servedPersonTypeValue),
      callback: function($$v) {
        _vm.form.servedPersonTypeValue = $$v
      },
      expression: "form.servedPersonTypeValue"
    }
  }, [_c('el-option', {
    attrs: {
      "label": "户籍人口",
      "value": "01"
    }
  }), _vm._v(" "), _c('el-option', {
    attrs: {
      "label": "流动人口",
      "value": "02"
    }
  }), _vm._v(" "), _c('el-option', {
    attrs: {
      "label": "留守人口",
      "value": "03"
    }
  })], 1)], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "出生日期"
    }
  }, [_c('el-date-picker', {
    attrs: {
      "type": "date",
      "placeholder": "选择日期"
    },
    model: {
      value: (_vm.form.birthDate),
      callback: function($$v) {
        _vm.form.birthDate = $$v
      },
      expression: "form.birthDate"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "民族"
    }
  }, [_c('el-select', {
    attrs: {
      "placeholder": "请选择民族"
    },
    model: {
      value: (_vm.form.ethnicity),
      callback: function($$v) {
        _vm.form.ethnicity = $$v
      },
      expression: "form.ethnicity"
    }
  }, [_c('el-option', {
    attrs: {
      "label": "汉族",
      "value": "1"
    }
  }), _vm._v(" "), _c('el-option', {
    attrs: {
      "label": "维吾尔族",
      "value": "2"
    }
  })], 1)], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "籍贯"
    }
  }, [_c('el-input', {
    model: {
      value: (_vm.form.nativePlace),
      callback: function($$v) {
        _vm.form.nativePlace = $$v
      },
      expression: "form.nativePlace"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "政治面貌"
    }
  }, [_c('el-select', {
    attrs: {
      "placeholder": ""
    },
    model: {
      value: (_vm.form.politics),
      callback: function($$v) {
        _vm.form.politics = $$v
      },
      expression: "form.politics"
    }
  }, _vm._l((_vm.Politics), function(v, i) {
    return _c('el-option', {
      key: i,
      attrs: {
        "value": v.politicsTypeValue,
        "label": v.politicsTypeName
      }
    })
  }))], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "婚姻状况"
    }
  }, [_c('el-select', {
    attrs: {
      "placeholder": "请输入婚姻状况"
    },
    model: {
      value: (_vm.form.maritalStatus),
      callback: function($$v) {
        _vm.form.maritalStatus = $$v
      },
      expression: "form.maritalStatus"
    }
  }, _vm._l((_vm.Marital), function(v, i) {
    return _c('el-option', {
      key: i,
      attrs: {
        "value": v.maritalStatus,
        "label": v.maritalStatusName
      }
    })
  }))], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "学历"
    }
  }, [_c('el-select', {
    attrs: {
      "placeholder": "请选择学历"
    },
    model: {
      value: (_vm.form.education),
      callback: function($$v) {
        _vm.form.education = $$v
      },
      expression: "form.education"
    }
  }, _vm._l((_vm.EducationType), function(v) {
    return _c('el-option', {
      key: v.id,
      attrs: {
        "label": v.educationTypeName,
        "value": v.education
      }
    })
  }))], 1)], 1), _vm._v(" "), _c('div', {
    staticStyle: {
      "display": "inline-block",
      "width": "50%"
    }
  }, [_c('el-form-item', {
    attrs: {
      "label": "所属网格"
    }
  }, [_c('el-select', {
    attrs: {
      "placeholder": ""
    },
    model: {
      value: (_vm.form.netGridID),
      callback: function($$v) {
        _vm.form.netGridID = $$v
      },
      expression: "form.netGridID"
    }
  }, _vm._l((_vm.NetGrid), function(v, i) {
    return _c('el-option', {
      key: i,
      attrs: {
        "value": v.netGridID,
        "label": v.netGridName
      }
    })
  }))], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "宗教信仰"
    }
  }, [_c('el-select', {
    attrs: {
      "placeholder": "请选择宗教信仰"
    },
    model: {
      value: (_vm.form.religiousBelief),
      callback: function($$v) {
        _vm.form.religiousBelief = $$v
      },
      expression: "form.religiousBelief"
    }
  }, _vm._l((_vm.ReligiousBeliefType), function(v) {
    return _c('el-option', {
      key: v.id,
      attrs: {
        "label": v.religiousBeliefName,
        "value": v.religiousBelief
      }
    })
  }))], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "职业类别"
    }
  }, [_c('el-select', {
    attrs: {
      "placeholder": "请选择职业类别"
    },
    model: {
      value: (_vm.form.careerType),
      callback: function($$v) {
        _vm.form.careerType = $$v
      },
      expression: "form.careerType"
    }
  }, _vm._l((_vm.CareerType), function(v) {
    return _c('el-option', {
      key: v.id,
      attrs: {
        "label": v.careerTypeName,
        "value": v.careerType
      }
    })
  }))], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "职业"
    }
  }, [_c('el-input', {
    model: {
      value: (_vm.form.career),
      callback: function($$v) {
        _vm.form.career = $$v
      },
      expression: "form.career"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "移动电话"
    }
  }, [_c('el-input', {
    model: {
      value: (_vm.form.mobileTel),
      callback: function($$v) {
        _vm.form.mobileTel = $$v
      },
      expression: "form.mobileTel"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "固定电话"
    }
  }, [_c('el-input', {
    model: {
      value: (_vm.form.fixedTel),
      callback: function($$v) {
        _vm.form.fixedTel = $$v
      },
      expression: "form.fixedTel"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "是否为特殊人群:"
    }
  }, [_c('el-radio-group', {
    model: {
      value: (_vm.form.isSpecialPopulation),
      callback: function($$v) {
        _vm.form.isSpecialPopulation = $$v
      },
      expression: "form.isSpecialPopulation"
    }
  }, [_c('el-radio', {
    attrs: {
      "label": 1
    }
  }, [_vm._v("是")]), _vm._v(" "), _c('el-radio', {
    attrs: {
      "label": 0
    }
  }, [_vm._v("否")])], 1)], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "服务处所:"
    }
  }, [_c('el-input', {
    model: {
      value: (_vm.form.servedPlace),
      callback: function($$v) {
        _vm.form.servedPlace = $$v
      },
      expression: "form.servedPlace"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "户籍地:"
    }
  }, [_c('v-distpicker', {
    attrs: {
      "province": _vm.select1.province.Name,
      "city": _vm.select1.city.Name,
      "area": _vm.select1.area.Name
    },
    on: {
      "selected": _vm.getValue
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "户籍门(楼)详细地址:"
    }
  }, [_c('el-input', {
    model: {
      value: (_vm.form.domicileAddressDetail),
      callback: function($$v) {
        _vm.form.domicileAddressDetail = $$v
      },
      expression: "form.domicileAddressDetail"
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "现住地:"
    }
  }, [_c('v-distpicker', {
    attrs: {
      "province": _vm.select2.province.Name,
      "city": _vm.select2.city.Name,
      "area": _vm.select2.area.Name
    },
    on: {
      "selected": _vm.getValue2
    }
  })], 1), _vm._v(" "), _c('el-form-item', {
    attrs: {
      "label": "现住地门(楼)详细地址:"
    }
  }, [_c('el-input', {
    model: {
      value: (_vm.form.presentAddressDetail),
      callback: function($$v) {
        _vm.form.presentAddressDetail = $$v
      },
      expression: "form.presentAddressDetail"
    }
  })], 1)], 1), _vm._v(" "), _c('el-row', [_c('el-col', {
    attrs: {
      "align": "center",
      "span": 18
    }
  }, [_c('el-form-item', [_c('el-button', {
    attrs: {
      "type": "primary"
    },
    on: {
      "click": _vm.onSubmit
    }
  }, [_vm._v("更新")])], 1)], 1)], 1)], 1)])], 1), _vm._v(" "), _c('el-col', {
    attrs: {
      "span": 24
    }
  }, [_c('fieldset', {
    staticStyle: {
      "width": "80%",
      "margin-left": "10%"
    }
  }, [_c('legend', {
    staticStyle: {
      "margin-left": "40px"
    }
  }, [_c('h1', [_vm._v("户籍信息")])]), _vm._v(" "), (_vm.form.servedPersonTypeValue === '01') ? _c('div', {
    staticStyle: {
      "width": "80%",
      "margin-left": "5%"
    }
  }, [_c('resident-form', {
    attrs: {
      "Resident": _vm.resident,
      "ConsistforPersonHouseType": _vm.ConsistforPersonHouseType,
      "usepath": _vm.usepath
    }
  })], 1) : _vm._e(), _vm._v(" "), (_vm.form.servedPersonTypeValue === '02') ? _c('div', {
    staticStyle: {
      "width": "80%",
      "margin-left": "5%"
    }
  }, [_c('floating-population-form', {
    attrs: {
      "floatingPopulation": _vm.floatingPopulation,
      "HouseType": _vm.HouseType,
      "CertificateType": _vm.CertificateType,
      "FolatingReasonType": _vm.FolatingReasonType,
      "UnSettledReasonType": _vm.UnSettledReasonType,
      "usepath": _vm.usepath
    }
  })], 1) : _vm._e(), _vm._v(" "), (_vm.form.servedPersonTypeValue === '03') ? _c('div', {
    staticStyle: {
      "width": "80%",
      "margin-left": "5%"
    }
  }, [_c('stayed-person-form', {
    attrs: {
      "StayedPerson": _vm.StayedPerson,
      "ConsistforPersonHouseTypes": _vm.ConsistforPersonHouseType,
      "StayedPersonType": _vm.StayedPersonType,
      "HealthStatusType": _vm.HealthStatusType,
      "usepath": _vm.usepath
    }
  })], 1) : _vm._e(), _vm._v(" "), (_vm.form.servedPersonTypeValue === '99') ? _c('div', {
    staticStyle: {
      "width": "80%",
      "margin-left": "5%"
    }
  }, [_c('foreigner-person-form', {
    attrs: {
      "Foreigner": _vm.foreignerForm
    }
  })], 1) : _vm._e()])])], 1)], 1)
}
var staticRenderFns = []
var esExports = { render: render, staticRenderFns: staticRenderFns }
export default esExports


//////////////////
// WEBPACK FOOTER
// ./~/vue-loader/lib/template-compiler?{"id":"data-v-393ae589","hasScoped":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/populationManage/editPopulationInfo.vue
// module id = Dcmd
// module chunks = 15